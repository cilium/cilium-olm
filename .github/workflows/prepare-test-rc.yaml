name: Prepare and/or test new release candidate
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to be built and/or tested (format: '1.12.3')"
        required: true

env:
  VERSION: ${{ github.event.inputs.version }}
  IMAGE_REPOSITORY: quay.io/cilium/cilium-olm

jobs:
  check-rc-branch:
    name: Check for existing RC branch
    runs-on: ubuntu-latest
    outputs:
      RC_BRANCH_EXISTS: ${{ steps.check-rc.outputs.RC_BRANCH_EXISTS }}
    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          fetch-depth: 0

      - name: Check for existing RC branch
        id: check-rc
        run: |
          RC_SHA=$(git rev-parse --quiet --verify origin/rc/v${{ env.VERSION }} || true)
          if [[ -z "${RC_SHA}" ]]; then
            echo "rc/v${{ env.VERSION }} not found."
            echo "RC_BRANCH_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "rc/v${{ env.VERSION }} found."
            echo "RC_BRANCH_EXISTS=true" >> $GITHUB_OUTPUT
          fi

  create-rc:
    name: Create RC branch
    runs-on: ubuntu-latest
    needs: check-rc-branch
    if: needs.check-rc-branch.outputs.RC_BRANCH_EXISTS == 'false'
    steps:
      - name: Install Go
        id: install-go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568
        with:
          go-version: 1.19.2

      - name: Configure go cache
        run: |
          GO_BIN=$(go env GOPATH)/bin
          echo "GO_BIN=${GO_BIN}" >> $GITHUB_ENV

      - name: Cache go dependencies
        id: cache-go-dependencies
        uses: actions/cache@c17f4bf4666a8001b1a45c09eb7a485c41aa64c3
        with:
          path: ${{ env.GO_BIN }}
          key: ${{ runner.os }}-${{ steps.install-go.outputs.go-version }}

      - name: Install go dependencies
        if: steps.cache-go-dependencies.outputs.cache-hit != 'true'
        run: |
          (cd tools ; go install github.com/errordeveloper/imagine github.com/errordeveloper/kuegen github.com/operator-framework/operator-registry/cmd/opm)

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run add-release script and push RC branch to repository
        run: |
          git switch -c rc/v${{ env.VERSION }}
          echo "skip prompt" | ./scripts/add-release.sh ${{ env.VERSION }}
          git push -u origin rc/v${{ env.VERSION }}

  lint:
    name: Lint Image Build Logic
    runs-on: ubuntu-latest
    needs: [create-rc, check-rc-branch]
    if: always() && (needs.check-rc-branch.outputs.RC_BRANCH_EXISTS == 'true' || needs.create-rc.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          ref: rc/v${{ env.VERSION }}
          fetch-depth: 0

      - name: Run make lint
        uses: docker://quay.io/cilium/image-maker:9e2e7ad1a524cf714d491945e90fe650125cd60a
        with:
          entrypoint: make
          args: lint

  build-and-validate:
    name: Build Images and Validate Images
    runs-on: ubuntu-latest
    needs: [create-rc, check-rc-branch, lint]
    if: always() && (needs.check-rc-branch.outputs.RC_BRANCH_EXISTS == 'true' || needs.create-rc.result == 'success')
    env:
      PREFLIGHT_VERSION: 1.2.1
      PFLT_DOCKERCONFIG: ~/.docker/config.json
    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          ref: rc/v${{ env.VERSION }}
          fetch-depth: 0

      - name: Set image tag environment variable
        run: |
          SHA=$(git rev-parse HEAD)
          echo "IMAGE_TAG=ci-${{ env.VERSION }}-${SHA}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

      - name: Login to Quay.io
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME_OLM }}
          password: ${{ secrets.QUAY_PASSWORD_OLM }}

      - name: Build image and push
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          context: ./operator/cilium.v${{ env.VERSION }}/
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Install Preflight
        run: |
          curl https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/${{ env.PREFLIGHT_VERSION }}/preflight-linux-amd64 -o preflight-linux-amd64
          sha256sum --check .github_workflow_assets/preflight-linux-amd64.sha256sum
          sudo chmod +x preflight-linux-amd64
          sudo mv preflight-linux-amd64 /usr/local/bin/preflight

      - name: Run Preflight
        run: |
          preflight check container \
            --pyxis-api-token=${{ secrets.RHCP_PREFLIGHT_API_KEY }} \
            --certification-project-id=${{ secrets.RHCP_CERTIFICATION_PROJECT_ID }} \
            ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}

  conformance-tests:
    name: Run conformance tests
    runs-on: ubuntu-latest
    needs: [create-rc, check-rc-branch, lint, build-and-validate]
    if: always() && (needs.check-rc-branch.outputs.RC_BRANCH_EXISTS == 'true' || needs.create-rc.result == 'success')
    env:
      AWS_REGION: eu-west-2
      BASE_DOMAIN: ci.covalent.lol
    steps:
      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          ref: rc/v${{ env.VERSION }}
          fetch-depth: 0

      - name: Install openshift-install
        uses: redhat-actions/openshift-tools-installer@7c62f931b5d96ef5095199a16913e7bb8a0be308
        with:
          openshift-install: "4"

      - name: Set up AWS CLI credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ secrets.AWS_PR_SA_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PR_SA_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare OpenShift manifests
        run: |
          export AWS_REGION="${{ env.AWS_REGION }}"
          export BASE_DOMAIN="${{ env.BASE_DOMAIN }}"
          export CLUSTER_NAME="olm-ci-${{ github.run_id }}"
          export OCP_PULL_SECRET='${{ secrets.OCP_PULL_SECRET }}'

          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_ENV
          mkdir ${CLUSTER_NAME}
          envsubst < .github/openshift-install-config/install-config.yaml > ${CLUSTER_NAME}/install-config.yaml
          openshift-install create manifests --dir ${CLUSTER_NAME}
          cp manifests/cilium.v${{ env.VERSION }}/* ${CLUSTER_NAME}/manifests
          cp .github/openshift-install-config/cluster-network-07-cilium-ciliumconfig.yaml ${CLUSTER_NAME}/manifests/cluster-network-07-cilium-ciliumconfig.yaml
          sed -i 's|image:\ registry.connect.redhat.com/isovalent/.*|image:\ ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}|g' \
            ${CLUSTER_NAME}/manifests/cluster-network-06-cilium-00002-cilium-olm-deployment.yaml \
            ${CLUSTER_NAME}/manifests/cluster-network-06-cilium-00014-cilium.*-clusterserviceversion.yaml

      - name: Create OpenShift cluster
        id: create
        run: |
          openshift-install create cluster --dir ${{ env.CLUSTER_NAME }}

      - name: Log in to registry.redhat.io
        uses: redhat-actions/podman-login@632d91dfe19e1b55833cb708786bfbad2c2a0335
        with:
          registry: registry.redhat.io
          username: ${{ secrets.RH_REGISTRY_USERNAME }}
          password: ${{ secrets.RH_REGISTRY_PASSWORD }}

      - name: Run network conformance tests
        run: |
          cp ${{ env.CLUSTER_NAME }}/auth/kubeconfig .
          podman run -v `pwd`:/data:z --rm -it \
            registry.redhat.io/openshift4/ose-tests sh -c \
            "KUBECONFIG=/data/kubeconfig.yaml /usr/bin/openshift-tests run openshift/network/third-party -o /data/results.txt"

      # If the create step was run, always run the clean up step, even if create
      # or test steps failed
      - name: Clean up OpenShift resources
        if: always() && steps.create.outcome != 'skipped'
        run: |
          openshift-install destroy cluster --dir ${{ env.CLUSTER_NAME }}

      - name: Upload artifacts
        if: ${{ !success() }}
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: openshift-log-bundle
          path: ${{ env.CLUSTER_NAME }}/log-bundle-*.tar.gz
          retention-days: 5
